name: Android CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-android:
    runs-on: ubuntu-latest
    container:
      # This is the direct equivalent of the global 'image:' in your GitLab file.
      image: reactnativecommunity/react-native-android:v17.0

    steps:
      # Step 1: Get the code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Node.js environment (Best Practice)
      # This ensures npm and npx are correctly added to the PATH.
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Or your project's specific Node.js version

      # Step 3: Cache dependencies for speed
      # This is a major improvement over passing artifacts.
      - name: Cache node_modules
        uses: actions/cache@v4
        id: node-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 4: Install dependencies (maps to your 'install-packages' stage)
      - name: Install Dependencies
        # This step only runs if the cache wasn't a perfect match
        if: steps.node-cache.outputs.cache-hit != 'true'
        # 'npm ci' is faster and safer for CI than 'rm package-lock && npm install'
        run: npm ci

      # Step 5: Build the Android app (maps to your 'build' stage)
      - name: Build Android Release
        run: |
          cd android
          chmod +x ./gradlew
          ./gradlew clean
          ./gradlew assembleRelease --no-daemon

      # Step 6: Upload the final APK (maps to the artifacts in your 'build' stage)
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release.apk
          path: android/app/build/outputs/apk/release/app-release.apk